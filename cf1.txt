Resources:
  myWebAppcluster79FAB8F6:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Resource
  myWebAppclusterVpc0DBA491A:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/Vpc
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/Resource
  myWebAppclusterVpcPublicSubnet1Subnet2FFD73EE:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: myWebAppclusterVpc0DBA491A
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet1/Subnet
  myWebAppclusterVpcPublicSubnet1RouteTable85AA218F:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myWebAppclusterVpc0DBA491A
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet1/RouteTable
  myWebAppclusterVpcPublicSubnet1RouteTableAssociationC4BBCBAA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: myWebAppclusterVpcPublicSubnet1RouteTable85AA218F
      SubnetId:
        Ref: myWebAppclusterVpcPublicSubnet1Subnet2FFD73EE
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet1/RouteTableAssociation
  myWebAppclusterVpcPublicSubnet1DefaultRoute36D5B5BA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: myWebAppclusterVpcPublicSubnet1RouteTable85AA218F
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myWebAppclusterVpcIGWD959D842
    DependsOn:
      - myWebAppclusterVpcVPCGWA93107E6
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet1/DefaultRoute
  myWebAppclusterVpcPublicSubnet1EIPC3F72457:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet1/EIP
  myWebAppclusterVpcPublicSubnet1NATGateway27A28EFC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - myWebAppclusterVpcPublicSubnet1EIPC3F72457
          - AllocationId
      SubnetId:
        Ref: myWebAppclusterVpcPublicSubnet1Subnet2FFD73EE
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet1/NATGateway
  myWebAppclusterVpcPublicSubnet2SubnetB0F1F136:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: myWebAppclusterVpc0DBA491A
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet2/Subnet
  myWebAppclusterVpcPublicSubnet2RouteTableD27465B9:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myWebAppclusterVpc0DBA491A
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet2/RouteTable
  myWebAppclusterVpcPublicSubnet2RouteTableAssociationA13629DF:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: myWebAppclusterVpcPublicSubnet2RouteTableD27465B9
      SubnetId:
        Ref: myWebAppclusterVpcPublicSubnet2SubnetB0F1F136
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet2/RouteTableAssociation
  myWebAppclusterVpcPublicSubnet2DefaultRoute928D9030:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: myWebAppclusterVpcPublicSubnet2RouteTableD27465B9
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myWebAppclusterVpcIGWD959D842
    DependsOn:
      - myWebAppclusterVpcVPCGWA93107E6
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet2/DefaultRoute
  myWebAppclusterVpcPublicSubnet2EIP04C95BBF:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet2/EIP
  myWebAppclusterVpcPublicSubnet2NATGateway8767845D:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - myWebAppclusterVpcPublicSubnet2EIP04C95BBF
          - AllocationId
      SubnetId:
        Ref: myWebAppclusterVpcPublicSubnet2SubnetB0F1F136
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PublicSubnet2/NATGateway
  myWebAppclusterVpcPrivateSubnet1Subnet27FCFAC6:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: myWebAppclusterVpc0DBA491A
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PrivateSubnet1/Subnet
  myWebAppclusterVpcPrivateSubnet1RouteTable7CCE892C:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myWebAppclusterVpc0DBA491A
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/Vpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PrivateSubnet1/RouteTable
  myWebAppclusterVpcPrivateSubnet1RouteTableAssociation4F20DD2C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: myWebAppclusterVpcPrivateSubnet1RouteTable7CCE892C
      SubnetId:
        Ref: myWebAppclusterVpcPrivateSubnet1Subnet27FCFAC6
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PrivateSubnet1/RouteTableAssociation
  myWebAppclusterVpcPrivateSubnet1DefaultRoute39323A05:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: myWebAppclusterVpcPrivateSubnet1RouteTable7CCE892C
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: myWebAppclusterVpcPublicSubnet1NATGateway27A28EFC
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PrivateSubnet1/DefaultRoute
  myWebAppclusterVpcPrivateSubnet2SubnetB891632D:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: myWebAppclusterVpc0DBA491A
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PrivateSubnet2/Subnet
  myWebAppclusterVpcPrivateSubnet2RouteTableFABFCE07:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myWebAppclusterVpc0DBA491A
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/Vpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PrivateSubnet2/RouteTable
  myWebAppclusterVpcPrivateSubnet2RouteTableAssociation7657CEB3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: myWebAppclusterVpcPrivateSubnet2RouteTableFABFCE07
      SubnetId:
        Ref: myWebAppclusterVpcPrivateSubnet2SubnetB891632D
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PrivateSubnet2/RouteTableAssociation
  myWebAppclusterVpcPrivateSubnet2DefaultRouteD1AB9746:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: myWebAppclusterVpcPrivateSubnet2RouteTableFABFCE07
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: myWebAppclusterVpcPublicSubnet2NATGateway8767845D
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/PrivateSubnet2/DefaultRoute
  myWebAppclusterVpcIGWD959D842:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/Vpc
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/IGW
  myWebAppclusterVpcVPCGWA93107E6:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myWebAppclusterVpc0DBA491A
      InternetGatewayId:
        Ref: myWebAppclusterVpcIGWD959D842
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/Vpc/VPCGW
  myWebAppclusterDefaultAutoScalingGroupInstanceSecurityGroup2D9B231E:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup
      VpcId:
        Ref: myWebAppclusterVpc0DBA491A
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/InstanceSecurityGroup/Resource
  myWebAppclusterDefaultAutoScalingGroupInstanceSecurityGroupfromEcsEc2StackmyWebAppserviceLBSecurityGroup4CD919953276865535BAC2E738:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 32768
      GroupId:
        Fn::GetAtt:
          - myWebAppclusterDefaultAutoScalingGroupInstanceSecurityGroup2D9B231E
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - myWebAppserviceLBSecurityGroup22A25AD0
          - GroupId
      ToPort: 65535
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/InstanceSecurityGroup/from EcsEc2StackmyWebAppserviceLBSecurityGroup4CD91995:32768-65535
  myWebAppclusterDefaultAutoScalingGroupInstanceRoleBF6928E7:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/InstanceRole/Resource
  myWebAppclusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy3F4DDBC5:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:DeregisterContainerInstance
              - ecs:RegisterContainerInstance
              - ecs:Submit*
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - myWebAppcluster79FAB8F6
                - Arn
          - Action:
              - ecs:Poll
              - ecs:StartTelemetrySession
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - myWebAppcluster79FAB8F6
                    - Arn
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:DiscoverPollEndpoint
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: myWebAppclusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy3F4DDBC5
      Roles:
        - Ref: myWebAppclusterDefaultAutoScalingGroupInstanceRoleBF6928E7
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/InstanceRole/DefaultPolicy/Resource
  myWebAppclusterDefaultAutoScalingGroupInstanceProfileA6DA63E6:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: myWebAppclusterDefaultAutoScalingGroupInstanceRoleBF6928E7
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/InstanceProfile
  myWebAppclusterDefaultAutoScalingGroupLaunchConfig378EBF6F:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinux2arm64recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t4g.micro
      IamInstanceProfile:
        Ref: myWebAppclusterDefaultAutoScalingGroupInstanceProfileA6DA63E6
      SecurityGroups:
        - Fn::GetAtt:
            - myWebAppclusterDefaultAutoScalingGroupInstanceSecurityGroup2D9B231E
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                echo ECS_CLUSTER=
              - Ref: myWebAppcluster79FAB8F6
              - |-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
                sudo service iptables save
                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
    DependsOn:
      - myWebAppclusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy3F4DDBC5
      - myWebAppclusterDefaultAutoScalingGroupInstanceRoleBF6928E7
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/LaunchConfig
  myWebAppclusterDefaultAutoScalingGroupASG0E151312:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "1"
      MinSize: "1"
      DesiredCapacity: "1"
      LaunchConfigurationName:
        Ref: myWebAppclusterDefaultAutoScalingGroupLaunchConfig378EBF6F
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup
      VPCZoneIdentifier:
        - Ref: myWebAppclusterVpcPrivateSubnet1Subnet27FCFAC6
        - Ref: myWebAppclusterVpcPrivateSubnet2SubnetB891632D
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/ASG
  myWebAppclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole1C5BB66F:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/Resource
  myWebAppclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy3ABD77BB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: myWebAppclusterDefaultAutoScalingGroupASG0E151312
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - myWebAppcluster79FAB8F6
                    - Arn
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - myWebAppcluster79FAB8F6
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - myWebAppcluster79FAB8F6
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: myWebAppclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy3ABD77BB
      Roles:
        - Ref: myWebAppclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole1C5BB66F
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  myWebAppclusterDefaultAutoScalingGroupDrainECSHookFunction457AC54A:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json, os, time

          ecs = boto3.client('ecs')
          autoscaling = boto3.client('autoscaling')


          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            task_arns = container_instance_task_arns(cluster, instance_arn)
            
            if task_arns:
              print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))

            while has_tasks(cluster, instance_arn, task_arns):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]

          def container_instance_task_arns(cluster, instance_arn):
            """Fetch tasks for a container instance ARN."""
            arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']
            return arns

          def has_tasks(cluster, instance_arn, task_arns):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            task_count = None

            if task_arns:
              # Fetch details for tasks running on the container instance
              tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']
              if tasks:
                # Consider any non-stopped tasks as running
                task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']
            
            if not task_count:
              # Fallback to instance task counts if detailed task information is unavailable
              task_count = instance['runningTasksCount'] + instance['pendingTasksCount']
              
            print('Instance %s has %s tasks' % (instance_arn, task_count))

            return task_count > 0

          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Role:
        Fn::GetAtt:
          - myWebAppclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole1C5BB66F
          - Arn
      Environment:
        Variables:
          CLUSTER:
            Ref: myWebAppcluster79FAB8F6
      Handler: index.lambda_handler
      Runtime: python3.6
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup
      Timeout: 55
    DependsOn:
      - myWebAppclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy3ABD77BB
      - myWebAppclusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole1C5BB66F
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/Resource
  myWebAppclusterDefaultAutoScalingGroupDrainECSHookFunctionAllowInvokeEcsEc2StackmyWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF5B48F5876E48E32:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - myWebAppclusterDefaultAutoScalingGroupDrainECSHookFunction457AC54A
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: myWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicDFC87FE0
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/AllowInvoke:EcsEc2StackmyWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF5B48F58
  myWebAppclusterDefaultAutoScalingGroupDrainECSHookFunctionTopic4F09841D:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: myWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicDFC87FE0
      Endpoint:
        Fn::GetAtt:
          - myWebAppclusterDefaultAutoScalingGroupDrainECSHookFunction457AC54A
          - Arn
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/DrainECSHook/Function/Topic/Resource
  myWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookRole692C26EA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/Resource
  myWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy32E96249:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: myWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicDFC87FE0
        Version: "2012-10-17"
      PolicyName: myWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy32E96249
      Roles:
        - Ref: myWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookRole692C26EA
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  myWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicDFC87FE0:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: Name
          Value: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Topic/Resource
  myWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookA2758A65:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: myWebAppclusterDefaultAutoScalingGroupASG0E151312
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 45
      NotificationTargetARN:
        Ref: myWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicDFC87FE0
      RoleARN:
        Fn::GetAtt:
          - myWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookRole692C26EA
          - Arn
    DependsOn:
      - myWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy32E96249
      - myWebAppclusterDefaultAutoScalingGroupLifecycleHookDrainHookRole692C26EA
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Resource
  myWebAppserviceLB2F5390E3:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - myWebAppserviceLBSecurityGroup22A25AD0
            - GroupId
      Subnets:
        - Ref: myWebAppclusterVpcPublicSubnet1Subnet2FFD73EE
        - Ref: myWebAppclusterVpcPublicSubnet2SubnetB0F1F136
      Type: application
    DependsOn:
      - myWebAppclusterVpcPublicSubnet1DefaultRoute36D5B5BA
      - myWebAppclusterVpcPublicSubnet2DefaultRoute928D9030
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-service/LB/Resource
  myWebAppserviceLBSecurityGroup22A25AD0:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB EcsEc2StackmyWebAppserviceLB8B1CA53A
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: myWebAppclusterVpc0DBA491A
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-service/LB/SecurityGroup/Resource
  myWebAppserviceLBSecurityGrouptoEcsEc2StackmyWebAppclusterDefaultAutoScalingGroupInstanceSecurityGroupD02E63B532768655357C56F908:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - myWebAppserviceLBSecurityGroup22A25AD0
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - myWebAppclusterDefaultAutoScalingGroupInstanceSecurityGroup2D9B231E
          - GroupId
      FromPort: 32768
      ToPort: 65535
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-service/LB/SecurityGroup/to EcsEc2StackmyWebAppclusterDefaultAutoScalingGroupInstanceSecurityGroupD02E63B5:32768-65535
  myWebAppserviceLBPublicListener663538AA:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: myWebAppserviceLBPublicListenerECSGroup5A73B327
          Type: forward
      LoadBalancerArn:
        Ref: myWebAppserviceLB2F5390E3
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-service/LB/PublicListener/Resource
  myWebAppserviceLBPublicListenerECSGroup5A73B327:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"
      TargetType: instance
      VpcId:
        Ref: myWebAppclusterVpc0DBA491A
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-service/LB/PublicListener/ECSGroup/Resource
  myWebAppserviceTaskDefTaskRole1FF52BF5:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-service/TaskDef/TaskRole/Resource
  myWebAppserviceTaskDefCE026C91:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image:
            Fn::Join:
              - ""
              - - Ref: AWS::AccountId
                - .dkr.ecr.
                - Ref: AWS::Region
                - "."
                - Ref: AWS::URLSuffix
                - /aws-cdk/assets:436b6595a2cb20f501d924f2f300d54225ee4be5f70bb54ac98c6aaadb9a1d6b
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: myWebAppserviceTaskDefwebLogGroup77E2E3B3
              awslogs-stream-prefix: myWebApp-service
              awslogs-region:
                Ref: AWS::Region
          Memory: 512
          Name: web
          PortMappings:
            - ContainerPort: 80
              HostPort: 0
              Protocol: tcp
      ExecutionRoleArn:
        Fn::GetAtt:
          - myWebAppserviceTaskDefExecutionRole8B06806B
          - Arn
      Family: EcsEc2StackmyWebAppserviceTaskDef7C68CEC9
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - myWebAppserviceTaskDefTaskRole1FF52BF5
          - Arn
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-service/TaskDef/Resource
  myWebAppserviceTaskDefwebLogGroup77E2E3B3:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-service/TaskDef/web/LogGroup/Resource
  myWebAppserviceTaskDefExecutionRole8B06806B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-service/TaskDef/ExecutionRole/Resource
  myWebAppserviceTaskDefExecutionRoleDefaultPolicy28276140:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/aws-cdk/assets
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - myWebAppserviceTaskDefwebLogGroup77E2E3B3
                - Arn
        Version: "2012-10-17"
      PolicyName: myWebAppserviceTaskDefExecutionRoleDefaultPolicy28276140
      Roles:
        - Ref: myWebAppserviceTaskDefExecutionRole8B06806B
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-service/TaskDef/ExecutionRole/DefaultPolicy/Resource
  myWebAppserviceService69454CE8:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: myWebAppcluster79FAB8F6
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn:
            Ref: myWebAppserviceLBPublicListenerECSGroup5A73B327
      SchedulingStrategy: REPLICA
      ServiceName: myWebApp-service
      TaskDefinition:
        Ref: myWebAppserviceTaskDefCE026C91
    DependsOn:
      - myWebAppserviceLBPublicListenerECSGroup5A73B327
      - myWebAppserviceLBPublicListener663538AA
    Metadata:
      aws:cdk:path: EcsEc2Stack/myWebApp-service/Service/Service
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAACn1TTW/bMAz9Lb0r6pYdht6WplkXINiMJOidUWiHiywZ+kgRGP7vo+S4dtdhJz0+khI/nj7Lh6/y0903ePUzdTzft8o6lO0ugDqLLXobnUKxtMYHF1UQy9IU4KDGgC4Zv2JoYhAL7zFwUkWmSvSYWRpOPlIgazqRXmlRedkudfS3Kwa4UvM9+PMTlmRyfHL+zVgTgAy6Ccd5O3QX6l+7wU6gmsv2pVGJfCmWoogHTWoXDwZzGyPa2hhwDweNIz9y3JpVBENB2ZHAal2k4yeEZwj4CldROLowHC9eG+6L8RDQV3KzFoFnfKrRBLFDFR2F67Ozsemb+B+xNpVD7z/wq0zzlGOwXoHmXch2wcauN95u20A06sSzLKmK7q21D6EbKlFdlcYf1p5z4pToBEEt263t55bPwvKMc6MjWrN2wCgsnC1J82Y01IcjyPY7VzG8PcUFupq8z4rxhsXCE/XKUTMEvLP3tqG85AzS3v2sgZAm7+WiabiM3OHGwvERdKrkOJEMavCBlGbvIXu5+wsr59+ZWbDv7GkcsY7NLWbAE/8eXMViGLYwMVPVbgbpE3n5ZNUZ3bqGCvO3Sj65xcZ6CtZdH8Gj0LbiuWzsZKc33HWdKK7hZM39F/kg53e/PdHMRROoRrntzz8nmhhq9gMAAA==
    Metadata:
      aws:cdk:path: EcsEc2Stack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceecsoptimizedamiamazonlinux2arm64recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/arm64/recommended/image_id
Outputs:
  myWebAppserviceLoadBalancerDNS3185BEF8:
    Value:
      Fn::GetAtt:
        - myWebAppserviceLB2F5390E3
        - DNSName
  myWebAppserviceServiceURL41D7FC4E:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - myWebAppserviceLB2F5390E3
              - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

